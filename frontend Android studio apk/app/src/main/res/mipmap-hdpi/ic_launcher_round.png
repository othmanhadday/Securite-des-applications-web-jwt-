// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.google.firebase.database.tubesock;

import android.net.SSLCertificateSocketFactory;
import android.net.SSLSessionCache;
import androidx.annotation.Nullable;
import com.google.firebase.database.connection.ConnectionContext;
import com.google.firebase.database.logging.LogWrapper;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.Socket;
import java.net.URI;
import java.net.UnknownHostException;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.atomic.AtomicInteger;
import javax.net.SocketFactory;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSession;
import javax.net.ssl.SSLSocket;

/**
 * This is the main class used to create a websocket connection. Create a new instance, set an event
 * handler, and then call connect(). Once the event handler's onOpen method has been called, call
 * send() on the websocket to transmit data.
 */
public class WebSocket {
  private static final int SSL_HANDSHAKE_TIMEOUT_MS = 60 * 1000;
  private static final String THREAD_BASE_NAME = "TubeSock";
  private static final AtomicInteger clientCount = new AtomicInteger(0);

  private enum State {
    NONE,
    CONNECTING,
    CONNECTED,
    DISCONNECTING,
    DISCONNECTED
  };

  private static final Charset UTF8 = Charset.forName("UTF-8");

  static final byte OPCODE_NONE = 0x0;
  static final byte OPCODE_TEXT = 0x1;
  static final byte OPCODE_BINARY = 0x2;
  static final byte OPCODE_CLOSE = 0x8;
  static final byte OPCODE_PING = 0x9;
  static final byte OPCODE_PONG = 0xA;

  private volatile State state = State.NONE;
  private volatile Socket socket = null;

  private WebSocketEventHandler eventHandler = null;

  private final URI url;
  @Nullable private final String sslCacheDirectory;

  private final WebSocketReceiver receiver;
  private final WebSocketWriter writer;
  private final WebSocketHandshake handshake;
  private final LogWrapper logger;
  private final int clientId = clientCount.incrementAndGet();

  private final Thread innerThread;
  private static ThreadFactory threadFactory = Executors.defaultThreadFactory();
  private static ThreadInitializer intializer =
      new ThreadInitializer() {
        @Override
        public void setName(Thread t, String name) {
          t.setName(name);
        }
      };

  static ThreadFactory getThreadFactory() {
    return threadFactory;
  }

  static ThreadInitializer getIntializer() {
    return intializer;
  }

  public static void setThreadFactory(ThreadFactory threadFactory, ThreadInitializer intializer) {
    WebSocket.threadFactory = threadFactory;
    WebSocket.intializer = intializer;
  }

  /**
   * Create a websocket to connect to a given server
   *
   * @param url The URL of a websocket server
   */
  public WebSocket(ConnectionContext context, URI url) {
    this(context, url, null);
  }

  /**
   * Create a websocket to connect to a given server. Include protocol in websocket handshake
   *
   * @param url The URL of a websocket server
   * @param protocol The protocol to include in the handshake. If null, it will be omitted
   */
  public WebSocket(ConnectionContext context, URI url, String protocol) {
    this(context, url, protocol, null);
  }

  /**
   * Create a websocket to connect to a given server. Include the given protocol in the handshake,
   * as well as any extra HTTP headers specified. Useful if you would like to include a User-Agent
   * or other header
   *
   * @param url The URL of a websocket server
   * @param protocol The protocol to include in the handshake. If null, it will be omitted
   * @param extraHeaders Any extra HTTP headers to be included with the initial request. Pass null
   *     if not extra headers are requested
   */
  public WebSocket(
      ConnectionContext context, URI url, String protocol, Map<String, String> extraHeaders) {
    innerThread =
        getThreadFactory()
            .newThread(
                new Runnable() {
                  @Override
                  public void run() {
                    runReader();
                  }
                });
    this.url = url;
    sslCacheDirectory = context.getSslCacheDirectory();
    logger = new LogWrapper(context.getLogger(), "WebSocket", "sk_" + clientId);
    handshake = new WebSocketHandshake(url, protocol, extraHeaders);
    receiver = new WebSocketReceiver(this);
    writer = new WebSocketWriter(this, THREAD_BASE_NAME, clientId);
  }

  /**
   * Must be called before connect(). Set 